/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.WorkAreas.AdminRole;

import Business.Business;
import Business.Person.Person;
import Business.Person.PersonDirectory;
import java.awt.Dimension;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.renderer.category.CategoryItemRenderer;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.title.TextTitle;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.data.category.DefaultCategoryDataset;


/**
 *
 * @author shrey
 */

public class DashboardMainJPanel extends javax.swing.JPanel {

    /**
     * Creates new form DashboardMainJPanel
     */
    PersonDirectory list;
    Business business;
    public DashboardMainJPanel(Business business, PersonDirectory list) {
        this.list = list;
        this.business = business;
        initComponents();
        displayPersonData();
        
        
    }

    public void displayPersonData(){
        
       
        list = business.getPersonDirectory();
     for (Person person : list.getPersonList()) {
            if (person.getType() == "Faculty") {
                
            System.out.print("FIRST NAME"+person.getFirstName().toString());
             System.out.print("LAST NAME"+person.getLastName().toString());
              System.out.print("EMAIL"+person.getEmail().toString());
                 double rating = person.calculateAverageRating(person.getFirstName().toString()); 
                 System.out.print("rating"+rating+"rating from method"+person.getRating(person));

                
            }
     }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        jButton1.setText("Term Intake");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Professor Performance");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Course Intake");

        jButton4.setText("Department Performance");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jButton2)
                    .addComponent(jButton1))
                .addContainerGap(585, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addComponent(jButton1)
                .addGap(44, 44, 44)
                .addComponent(jButton2)
                .addGap(54, 54, 54)
                .addComponent(jButton4)
                .addGap(57, 57, 57)
                .addComponent(jButton3)
                .addContainerGap(185, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
          SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
              
            }
        });   
    
          
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
      
                 SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUIForProfPerformance();
              
            }
        });  
    }//GEN-LAST:event_jButton2ActionPerformed

        
     private void createAndShowGUIForProfPerformance() {
        JFrame frame = new JFrame("Bar Chart Demo");
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        DefaultCategoryDataset dataset = createDatasetForProfPerformance();
        JFreeChart chart = createChartForProfPerformance(dataset);

        ChartPanel chartPanel = new ChartPanel(chart);
        chartPanel.setPreferredSize(new Dimension(800, 600));

        frame.add(chartPanel);

        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }

    private DefaultCategoryDataset createDatasetForProfPerformance() {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

    list = business.getPersonDirectory();
     for (Person person : list.getPersonList()) {
            if (person.getType() == "Faculty") {
                
                System.out.print("person.getFirstName().toString()"+person.getFirstName().toString());
               
                 
                 double rating = person.calculateAverageRating(person.getFirstName());
                  System.out.print("rating"+rating);
                 
                 dataset.addValue(rating,person.getFirstName().toString() , "A");
                
            }
        }

    return dataset;

       
    }

    private static JFreeChart createChartForProfPerformance(DefaultCategoryDataset dataset) {
        JFreeChart chart = ChartFactory.createBarChart(
                "Professor Salary and Rating",
                "Professor",
                "Value",
                dataset,
                PlotOrientation.VERTICAL,
                true,
                true,
                false
        );

        CategoryPlot plot = (CategoryPlot) chart.getPlot();
        CategoryItemRenderer renderer = new BarRenderer();
        plot.setRenderer(renderer);

        return chart;
    }
	
	
     private static void createAndShowGUI() {
        JFrame frame = new JFrame("Bar Chart Demo");
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        DefaultCategoryDataset dataset = createDataset();
        JFreeChart chart = createChart(dataset);

        ChartPanel chartPanel = new ChartPanel(chart);
        chartPanel.setPreferredSize(new Dimension(800, 600));

        frame.add(chartPanel);

        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }

    private static DefaultCategoryDataset createDataset() {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

       

    dataset.addValue(10.0, "Series 1", "A");
    dataset.addValue(15.0, "Series 1", "B");
    dataset.addValue(7.0, "Series 1", "C");

    dataset.addValue(5.0, "Series 2", "A");  // Add Series 2 data
    dataset.addValue(8.0, "Series 2", "B");
    dataset.addValue(12.0, "Series 2", "C");


    return dataset;

       
    }

    private static JFreeChart createChart(DefaultCategoryDataset dataset) {
        JFreeChart chart = ChartFactory.createBarChart(
                "Bar Chart Demo",
                "Category",
                "Value",
                dataset,
                PlotOrientation.VERTICAL,
                true,
                true,
                false
        );

        CategoryPlot plot = (CategoryPlot) chart.getPlot();
        CategoryItemRenderer renderer = new BarRenderer();
        plot.setRenderer(renderer);

        return chart;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    // End of variables declaration//GEN-END:variables
}
