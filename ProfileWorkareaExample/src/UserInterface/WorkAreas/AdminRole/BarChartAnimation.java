/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */

package UserInterface.WorkAreas.AdminRole;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.CategoryDataset;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import org.jfree.chart.plot.CategoryPlot;
/**
 *
 * @author shrey
 */
public class BarChartAnimation extends javax.swing.JPanel implements ActionListener {

     private JFreeChart chart;
    private Timer timer;
    private int animationValue = 0;

    public BarChartAnimation(String title) {
        chart = createChart(createDataset());
        ChartPanel chartPanel = new ChartPanel(chart);
        chartPanel.setPreferredSize(new Dimension(800, 600));
        add(chartPanel);

        timer = new Timer(1000, this);
        timer.start();
    }

    private CategoryDataset createDataset() {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        dataset.addValue(animationValue, "Value", "Bar");
        return dataset;
    }

    private JFreeChart createChart(CategoryDataset dataset) {
        JFreeChart barChart = ChartFactory.createBarChart(
                "Bar Chart Animation",
                "Category",
                "Value",
                dataset,
                PlotOrientation.VERTICAL,
                false, true, false);

       CategoryPlot plot = (CategoryPlot) barChart.getPlot();
        BarRenderer renderer = (BarRenderer) plot.getRenderer();
        renderer.setSeriesPaint(0, Color.blue);

        return barChart;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
    if (animationValue < 100) {
        animationValue += 10; // Increment the animation value
    } else {
        animationValue = 0; // Reset the animation value
    }

    CategoryDataset dataset = createDataset();
    
    DefaultCategoryDataset defaultDataset = (DefaultCategoryDataset) dataset;
    defaultDataset.clear(); // Clear the dataset
    
    // Add the updated value
    defaultDataset.addValue(animationValue, "Value", "Bar");
    
    chart.getCategoryPlot().setDataset(dataset); // Update the plot's dataset
}

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            JFrame frame = new JFrame("Bar Chart Animation");
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            BarChartAnimation animation = new BarChartAnimation("Bar Chart Animation");
            frame.add(animation);
            frame.pack();
            frame.setVisible(true);
        });
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
